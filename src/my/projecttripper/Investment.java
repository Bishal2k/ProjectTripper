/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.projecttripper;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author BISHAL
 */
public class Investment extends javax.swing.JFrame {

    /**
     * Creates new form Investment
     */
    PreparedStatement ps;
    String enteredBy;
    public Investment() {
        initComponents();
        enteredBy();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFoundation = new javax.swing.JPanel();
        tbpInvestment = new javax.swing.JTabbedPane();
        pnlInvestment = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInvestment = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtOrderId = new javax.swing.JTextField();
        txtHari = new javax.swing.JTextField();
        txtJanak = new javax.swing.JTextField();
        txtEnteredBy = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        bntEnter = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        pnlTaken = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTaken = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtOrderId2 = new javax.swing.JTextField();
        comboUser = new javax.swing.JComboBox<>();
        btnView2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMonthly = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jdcStarting = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        btnViewMonthly = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlFoundation.setBackground(new java.awt.Color(255, 255, 255));

        pnlInvestment.setBackground(new java.awt.Color(255, 255, 255));

        tblInvestment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "orderId", "Hari Investment", "Janak Investment", "EnteredBy"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblInvestment);
        if (tblInvestment.getColumnModel().getColumnCount() > 0) {
            tblInvestment.getColumnModel().getColumn(0).setResizable(false);
            tblInvestment.getColumnModel().getColumn(1).setResizable(false);
            tblInvestment.getColumnModel().getColumn(2).setResizable(false);
            tblInvestment.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Order Id:");

        jLabel2.setText("Hari Investment:");

        jLabel3.setText("Janak Investment:");

        jLabel4.setText("EnteredBy:");

        txtOrderId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderIdActionPerformed(evt);
            }
        });

        txtHari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHariActionPerformed(evt);
            }
        });

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        bntEnter.setText("Enter");
        bntEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntEnterActionPerformed(evt);
            }
        });

        btnView.setText("View Investment");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bntEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addComponent(btnView)
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bntEnter)
                    .addComponent(btnView)
                    .addComponent(btnDelete))
                .addGap(18, 18, 18)
                .addComponent(btnClear)
                .addContainerGap(107, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtOrderId, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(txtJanak))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel2)
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtHari, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEnteredBy, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(118, 118, 118)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtJanak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEnteredBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlInvestmentLayout = new javax.swing.GroupLayout(pnlInvestment);
        pnlInvestment.setLayout(pnlInvestmentLayout);
        pnlInvestmentLayout.setHorizontalGroup(
            pnlInvestmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInvestmentLayout.createSequentialGroup()
                .addGroup(pnlInvestmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1631, Short.MAX_VALUE)
                    .addGroup(pnlInvestmentLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlInvestmentLayout.setVerticalGroup(
            pnlInvestmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInvestmentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        tbpInvestment.addTab("Investment", pnlInvestment);

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblTaken.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Id", "Total Income", "User", "Money Taken"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblTaken);
        if (tblTaken.getColumnModel().getColumnCount() > 0) {
            tblTaken.getColumnModel().getColumn(0).setResizable(false);
            tblTaken.getColumnModel().getColumn(1).setResizable(false);
            tblTaken.getColumnModel().getColumn(2).setResizable(false);
            tblTaken.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1613, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel5.setText("orderId:");

        jLabel6.setText("User:");

        comboUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "admin", "Hari", "Janak" }));
        comboUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboUserActionPerformed(evt);
            }
        });

        btnView2.setText("View");
        btnView2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnView2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnView2)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtOrderId2)
                        .addComponent(comboUser, 0, 180, Short.MAX_VALUE)))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtOrderId2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comboUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnView2)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlTakenLayout = new javax.swing.GroupLayout(pnlTaken);
        pnlTaken.setLayout(pnlTakenLayout);
        pnlTakenLayout.setHorizontalGroup(
            pnlTakenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTakenLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnlTakenLayout.createSequentialGroup()
                .addGap(429, 429, 429)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTakenLayout.setVerticalGroup(
            pnlTakenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTakenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        tbpInvestment.addTab("Money Taken", pnlTaken);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblMonthly.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Starting Date", "Today Date", "Period(Months)", "Hari Investment", "Janak Investment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblMonthly);
        if (tblMonthly.getColumnModel().getColumnCount() > 0) {
            tblMonthly.getColumnModel().getColumn(0).setResizable(false);
            tblMonthly.getColumnModel().getColumn(1).setResizable(false);
            tblMonthly.getColumnModel().getColumn(2).setResizable(false);
            tblMonthly.getColumnModel().getColumn(3).setResizable(false);
            tblMonthly.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel7.setText("Starting Date:");

        jLabel8.setText("Select User:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hari", "Janak" }));

        btnViewMonthly.setText("View");
        btnViewMonthly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewMonthlyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnViewMonthly)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jdcStarting, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)))
                .addContainerGap(210, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jdcStarting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(btnViewMonthly)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(543, 543, 543)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(519, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 92, Short.MAX_VALUE))
        );

        tbpInvestment.addTab("Monthly Investment", jPanel5);

        javax.swing.GroupLayout pnlFoundationLayout = new javax.swing.GroupLayout(pnlFoundation);
        pnlFoundation.setLayout(pnlFoundationLayout);
        pnlFoundationLayout.setHorizontalGroup(
            pnlFoundationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFoundationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tbpInvestment)
                .addContainerGap())
        );
        pnlFoundationLayout.setVerticalGroup(
            pnlFoundationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFoundationLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(tbpInvestment)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlFoundation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlFoundation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtOrderIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderIdActionPerformed

    private void txtHariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHariActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHariActionPerformed

    private void bntEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntEnterActionPerformed
        // TODO add your handling code here:
        String orderId = txtOrderId.getText().trim();
        double iJanak = Double.parseDouble(txtJanak.getText().trim());
        double iHari = Double.parseDouble(txtHari.getText().trim());
        DefaultTableModel model = (DefaultTableModel)tblInvestment.getModel();
        long millis=System.currentTimeMillis();  
        java.sql.Date date=new java.sql.Date(millis);  
        
        if (!txtOrderId.getText().equals("") && !txtJanak.getText().equals("") && !txtHari.getText().equals("") && !enteredBy.equals(""))
        {
            String query = "insert into Investment values(?,?,?,?,?)";
            try {
                ps = MyConnection.getConnection().prepareStatement(query);
                ps.setString(1,orderId);
                ps.setDouble(2,iJanak);
                ps.setDouble(3,iHari);
                ps.setString(4,enteredBy);
                ps.setDate(5,date);
                ps.executeUpdate();
                ps.close();
                String query2 = "select orderId from Investment where orderId=?";
                try
                {
                    ps = MyConnection.getConnection().prepareStatement(query2);
                    ps.setString(1,orderId);
                    ResultSet rs = ps.executeQuery();
                    if (rs.next())
                    {
                        model.addRow(new Object[]{orderId,iJanak,iHari,enteredBy});
                        JOptionPane.showMessageDialog(null, "Inserted Successfully");
                        ps.close();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Please insert again");
                        ps.close();
                    }
                    
                }
                catch (SQLException ex) {
                Logger.getLogger(Investment.class.getName()).log(Level.SEVERE, null, ex);
                 JOptionPane.showMessageDialog(null, "orderId already exists");
            }
            
            } catch (SQLException ex) {
                Logger.getLogger(Investment.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_bntEnterActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel)tblInvestment.getModel();
         model.setRowCount(0);
        String orderId = txtOrderId.getText().trim();
        String query = "select * from Investment where orderId = ?";
        try {
            ps = MyConnection.getConnection().prepareStatement(query);
            ps.setString(1,orderId);
            ResultSet rs = ps.executeQuery();
            if(rs.next())
            {
                model.addRow(new Object[]{rs.getString("orderId"),rs.getString("hari"),rs.getString("janak"),rs.getString("enteredBy")});
                ps.close();
            }
            else
            {
                ps.close();
                 JOptionPane.showMessageDialog(null, "Sorry!!! No data Found");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Investment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
         JFrame f= new JFrame();
       String delete = JOptionPane.showInputDialog(f,"Enter Order No of the Entry You want to Delete ", "Delete Entry", JOptionPane.INFORMATION_MESSAGE); 
       String deleteEntry = delete.trim();
       try
       {
            try
                   {
                    String compare = "Select orderId from Investment where orderId = ?";
                    ps = MyConnection.getConnection().prepareStatement(compare);
                    ps.setString(1,delete);
                    ResultSet rs = ps.executeQuery();
                    if (rs.next())
                    {
                        String compareTo = rs.getString("orderId");
                        if(deleteEntry.equals(compareTo))
                        {    ps.close();
                             PreparedStatement ps2;
                             String query = "Delete from Investment where orderId = ?";
                             ps2 = MyConnection.getConnection().prepareStatement(query);
                             ps2.setString(1,deleteEntry);
                             ps2.executeUpdate();
                             ps2.close();
                             DefaultTableModel model = (DefaultTableModel)tblInvestment.getModel();
                             model.setRowCount(0);
                             JOptionPane.showMessageDialog(null, "Entry Deleted");
                             
                           
                           
                             
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "Sorry, No data found");
                        }
                        
                    }
                    else
                        {
                            JOptionPane.showMessageDialog(null, "Sorry, No data found");
                        }
                    
                    
                    
                   }
                   catch(SQLException e)
                   {
                     e.printStackTrace(); 
                     JOptionPane.showMessageDialog(null, "Sorry, Please Contact Developers");
                   }
       }
       catch(Exception e)
       {
           JOptionPane.showMessageDialog(null, "Sorry, No data found");
           System.out.println("Entered 01");
       }
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtOrderId.setText("");
        txtJanak.setText("");
        txtHari.setText("");
        
    }//GEN-LAST:event_btnClearActionPerformed

    private void comboUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboUserActionPerformed

    private void btnView2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnView2ActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel)tblTaken.getModel();
        // model.setRowCount(0);
        String orderId = txtOrderId2.getText().trim();
        String user = (String)comboUser.getSelectedItem();
        double add = 0;
        double add2=0;
        double totalAmount=0;
        String checker = "off";
        String query = "select * from PaymentDetails where orderId=? ";
        try {
            ps = MyConnection.getConnection().prepareStatement(query);
            ps.setString(1,orderId);
          
            ResultSet rs = ps.executeQuery();
            checker="!data";
            while (rs.next())
            {
               totalAmount=rs.getDouble("totalAmount");
               String userCheck = rs.getString("enteredBy");
               if (userCheck.equals(user))
               {
                   double takenAmount = rs.getDouble("paidAmount");
                   System.out.println("takenAmount"+takenAmount);
                   add = takenAmount+add;
                   checker="off";
                    
               }
               else
               {
                    checker="on";
                    
               }
              
                
            }
           
             if (checker.equals("on"))
               {
                   System.out.println("Entered o1");
                  
                    model.addRow(new Object[]{txtOrderId2.getText(),totalAmount,user,0});
                     ps.close();
               }
             else if (checker.equals("!data"))
             {
                  JOptionPane.showMessageDialog(null, "Sorry, No data found");
             }
               else
               {
                   System.out.println("Entered o2");
                  //DefaultTableModel model = (DefaultTableModel)tblTaken.getModel();
                 model.addRow(new Object[]{txtOrderId2.getText(),totalAmount,user,add}); 
                  ps.close();
               }
             
        } catch (SQLException ex) {
            Logger.getLogger(Investment.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        
    }//GEN-LAST:event_btnView2ActionPerformed

    private void btnViewMonthlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewMonthlyActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel)tblMonthly.getModel();
        String checker = "on";
        double addHari = 0.0;
        double addJanak = 0.0;
        LocalDate tDate = LocalDate.now();
        SimpleDateFormat dFormat = new SimpleDateFormat("yyyy-MM-dd");
        String date = dFormat.format(jdcStarting.getDate());
        DateTimeFormatter  formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate jDate1 = LocalDate.parse(date,formatter);
        double daysBetween = ChronoUnit.DAYS.between(jDate1,tDate);
        double months = daysBetween/30;
        String fMonths = String.format("%.02f",months);
        String query  = "Select SUM(hari)as totalHari,SUM(janak)as totalJanak from Investment where date<?";
        try {
            ps = MyConnection.getConnection().prepareStatement(query);
            ps.setString(1, date);
            ResultSet rs = ps.executeQuery();
            if (rs.next())
            {
                addHari = rs.getDouble("totalHari");
                addJanak = rs.getDouble("totalJanak");
               
                model.addRow(new Object[]{date,tDate,fMonths,addHari,addJanak});
                ps.close();
            }
            else
            {
                ps.close();
                 JOptionPane.showMessageDialog(null, "Sorry, No data found");
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(Investment.class.getName()).log(Level.SEVERE, null, ex);
        }

       
    }//GEN-LAST:event_btnViewMonthlyActionPerformed
    public void enteredBy()
    {
         String query = "select userName from UserLogin where userId = 1";
         try {
             ps= MyConnection.getConnection().prepareStatement(query);
             ResultSet rs = ps.executeQuery();
             if (rs.next())
             {
                 enteredBy = rs.getString("userName");
                 txtEnteredBy.setText(enteredBy);
                 ps.close();
             }
             else
             {
                 ps.close();
             }
         } catch (SQLException ex) {
             Logger.getLogger(ProjectTripper.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Investment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Investment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Investment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Investment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Investment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntEnter;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnView;
    private javax.swing.JButton btnView2;
    private javax.swing.JButton btnViewMonthly;
    private javax.swing.JComboBox<String> comboUser;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private com.toedter.calendar.JDateChooser jdcStarting;
    private javax.swing.JPanel pnlFoundation;
    private javax.swing.JPanel pnlInvestment;
    private javax.swing.JPanel pnlTaken;
    private javax.swing.JTable tblInvestment;
    private javax.swing.JTable tblMonthly;
    private javax.swing.JTable tblTaken;
    private javax.swing.JTabbedPane tbpInvestment;
    private javax.swing.JTextField txtEnteredBy;
    private javax.swing.JTextField txtHari;
    private javax.swing.JTextField txtJanak;
    private javax.swing.JTextField txtOrderId;
    private javax.swing.JTextField txtOrderId2;
    // End of variables declaration//GEN-END:variables
}
